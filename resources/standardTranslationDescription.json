{
  "Nullary Function": {
    "template": {
      "regex": "\\Qfun\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Q:\\E\\s+\\Q\\E(?<returnType>\\w+)\\Q\\E\\s+\\Q{\n\\E(?<body>\\w+)\\Q\n}\\E",
      "stringForm": "fun %!name$s : %returnType$s {\n%body$s\n}",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Nullary Function",
      "instantiationPriority": 100,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "returnType",
          "isTrigger": false,
          "isLong": false,
          "isNecessary": false
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "body",
          "isTrigger": false,
          "isLong": true,
          "isNecessary": false
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {"_type": "TemplateDataSource"}
  },
  "Requirement": {
    "template": {
      "regex": "\\Qreq\\E\\s+\\Q(\\E\\s+\\Q\\E(?<expr>\\w+)\\Q\\E\\s+\\Q)\\E",
      "stringForm": "req ( %!expr$s )",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "main",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Requirement",
      "instantiationPriority": 100,
      "fields": [{
        "isRecursive": false,
        "_type": "Field",
        "name": "expr",
        "isTrigger": false,
        "isLong": true,
        "isNecessary": true
      }]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "_type": "TemplateDataSource",
      "main": "$.elements[*]?(.type=\"Constraint\").id",
      "expr": "^.specification.body[*]",
      "PARENT_REFERENCE": "$.elements[*]?(.id=^.ownerId).name"
    }
  },
  "Set_Variable": {
    "template": {
      "regex": "\\Qvar\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Q:\\E\\s+\\Q\\E(?<type>\\w+)\\Q\\E",
      "stringForm": "var %!name$s : Set[%type$s]\n-- req %nameDup$s.size() = %size$s",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Set Variable",
      "instantiationPriority": 100,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "nameDup",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "type",
          "isTrigger": false,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "size",
          "isTrigger": false,
          "isLong": false,
          "isNecessary": true
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "_type": "TemplateDataSource",
      "name": ".DEBUG$.elements[*][?(.type=\"Property\"),?(.type=\"Port\")].name",
      "nameDup": "^.name",
      "type": "[LIB:,$].elements[*]?(.id=^.typeId).name",
      "size": "^.lowerValue.value",
      "PARENT_REFERENCE": "$.elements[*]?(.id=^.ownerId).name"
    }
  },
  "Variable": {
    "template": {
      "regex": "\\Qvar\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Q:\\E\\s+\\Q\\E(?<type>\\w+)\\Q\\E",
      "stringForm": "var %!name$s : %type$s",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Variable",
      "instantiationPriority": 100,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "type",
          "isTrigger": false,
          "isLong": false,
          "isNecessary": true
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "_type": "TemplateDataSource",
      "name": "$.elements[*][?(.type=\"Property\"),?(.type=\"Port\")].name",
      "type": "[LIB:,$].elements[*]?(.id=^.typeId).name",
      "PARENT_REFERENCE": "$.elements[*]?(.id=^.ownerId).name"
    }
  },
  "Generalized Class": {
    "template": {
      "regex": "\\Qclass\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Qextends\\E\\s+\\Q\\E(?<superClass>\\w+)\\Q\\E\\s+\\Q{\n\\E(?<content>.*?)\\Q\n}\\E",
      "stringForm": "class %!name$s extends %superClass$s {\n%@content$s\n}",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Generalized Class",
      "instantiationPriority": 0,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "superClass",
          "isTrigger": false,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": true,
          "_type": "Field",
          "name": "content",
          "isTrigger": false,
          "isLong": true,
          "isNecessary": false
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "superClass": "$.elements[*]?(.type=\"Class\")?(.id=$.elements[*]?(.type=\"Generalization\")?(.specificId=^.id).generalId).name",
      "_type": "TemplateDataSource",
      "name": "$.elements[*][?(.type=\"Class\"),?(.type=\"Diagram\")]?(!?(.ownerId=$.elements[*]?(.type=\"Class\").id)).name"
    }
  },
  "_type": "TranslationDescription",
  "Class": {
    "template": {
      "regex": "\\Qclass\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Q{\n\\E(?<content>.*?)\\Q\n}\\E",
      "stringForm": "class %!name$s {\n%@content$s\n}",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Class",
      "instantiationPriority": 0,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": true,
          "_type": "Field",
          "name": "content",
          "isTrigger": false,
          "isLong": true,
          "isNecessary": false
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "_type": "TemplateDataSource",
      "name": "$.elements[*]?(.type=\"Class\")?(!.generalizationIds[*])?(!?(.ownerId=$.elements[*]?(.type=\"Class\").id)).name"
    }
  },
  "Generalized Inner Class": {
    "template": {
      "regex": "\\Qclass\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Qextends\\E\\s+\\Q\\E(?<superClass>\\w+)\\Q\\E\\s+\\Q{\n\\E(?<content>.*?)\\Q\n}\\E",
      "stringForm": "\nclass %!name$s extends %superClass$s {\n%@content$s\n}\n",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Generalized Inner Class",
      "instantiationPriority": 50,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "superClass",
          "isTrigger": false,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": true,
          "_type": "Field",
          "name": "content",
          "isTrigger": false,
          "isLong": true,
          "isNecessary": false
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "superClass": "$.elements[*]?(.type=\"Class\")?(.id=$.elements[*]?(.type=\"Generalization\")?(.specificId=^.id).generalId).name",
      "_type": "TemplateDataSource",
      "name": "$.elements[*][?(.type=\"Class\"),?(.type=\"Diagram\")].name",
      "PARENT_REFERENCE": "$.elements[*]?(.id=^.ownerId).name"
    }
  },
  "Inner Class": {
    "template": {
      "regex": "\\Qclass\\E\\s+\\Q\\E(?<name>\\w+)\\Q\\E\\s+\\Q{\n\\E(?<content>.*?)\\Q\n}\\E",
      "stringForm": "\nclass %!name$s {\n%@content$s\n}\n",
      "triggerField": {
        "isRecursive": false,
        "_type": "Field",
        "name": "name",
        "isTrigger": true,
        "isLong": false,
        "isNecessary": true
      },
      "_type": "Template",
      "name": "Inner Class",
      "instantiationPriority": 50,
      "fields": [
        {
          "isRecursive": false,
          "_type": "Field",
          "name": "name",
          "isTrigger": true,
          "isLong": false,
          "isNecessary": true
        },
        {
          "isRecursive": true,
          "_type": "Field",
          "name": "content",
          "isTrigger": false,
          "isLong": true,
          "isNecessary": false
        }
      ]
    },
    "_type": "TranslationPair",
    "templateDataSource": {
      "_type": "TemplateDataSource",
      "name": "$.elements[*]?(.type=\"Class\")?(!.generalizationIds[*]).name",
      "PARENT_REFERENCE": "$.elements[*]?(.id=^.ownerId).name"
    }
  }
}